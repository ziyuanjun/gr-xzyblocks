# -*- eval: (setq org-download-image-dir (file-name-sans-extension (buffer-name))); -*-
# -*- org-export-babel-evaluate: nil; -*-
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../orgstyle.css"/>
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:t arch:headline author:t c:nil S:nil -:nil
#+OPTIONS: creator:nil d:(not "En") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t 
#+OPTIONS: ^:{}
#+LATEX_CLASS: ctexart
#+STARTUP: entitiespretty:t
#+TITLE: 谱分析方法总结
#+CREATOR: Emacs 26.0.50.2 (Org mode 9.0.4)

* 基础知识
- 连续傅里叶变换
  \begin{equation}
  X(f)=\int_{-\infty}^{+\infty}x(t)e^{-j2\pi ft}dt
  \end{equation}

- DTFT

  - 无限长序列
    \begin{equation}
    X(f)=\sum_{n=-\infty}^{+\infty}x(n)e^{-j2\pi f\frac{n}{f_s}}
    \end{equation}
    时域fs采样 $\longrightarrow$ 频域fs周期延拓

  - 有限序列
    \begin{equation}
    X(f)=\sum_{n=0}^{N-1}x(n)e^{-j2\pi f\frac{n}{f_s}}
    \end{equation}

- DFT
    \begin{align}
    X(k)=&\sum_{n=0}^{N-1}x(n)e^{-j\frac{2\pi}{N}kn}\\\notag
        =&\sum_{n=0}^{N-1}x(n)W_{N}^{kn}
    \end{align}

* 仿真
  假设存在三个单音信号,100Hz、200Hz、201Hz, 幅度分别为1、2、2.3, 采样率 fs=1000Hz, 时域波形生成：
  #+BEGIN_SRC python :session spectral :results file 
  import numpy as np
  import matplotlib.pyplot as plt

  a1,a2,a3=1,2,2.3
  f1,f2,f3=100,200,201

  fs=1000.0 #samprate (Hz)
  T=1 #total time of signal (s)

  t=np.array(range(int(T*fs)))*1.0/fs
  s1=np.cos(2*np.pi*f1*t)
  s2=np.cos(2*np.pi*f2*t)
  s3=np.cos(2*np.pi*f3*t)

  s=s1+s2+s3

  plt.clf()
  plt.plot(t,s)
  plt.savefig('spectral_est.org_imgs/wave.png')
  'spectral_est.org_imgs/wave.png' # return this to org-mode
  #+END_SRC

  #+RESULTS:
  [[file:spectral_est.org_imgs/wave.png]]

  #+BEGIN_SRC python :session spectral :results file :exports results
  plt.clf()
  S=np.fft.fft(s)/len(s)
  plt.plot(np.linspace(0,fs,len(s)),20*np.log10(np.abs(S)))
  plt.savefig('spectral_est.org_imgs/spectral.png')
  'spectral_est.org_imgs/spectral.png'
  #+END_SRC

  #+RESULTS:
  [[file:spectral_est.org_imgs/spectral.png]]

  上面例子中，FFT 的分析频率为 fs/N=1Hz, 但200Hz 和 201Hz 似乎并没有分开，通过局部放大可以确认：
  #+BEGIN_SRC python :session spectral :results file :exports results
  ax=plt.gca()
  plt.axis([190,210,-350,0])
  plt.savefig('spectral_est.org_imgs/spectral_localzoom.png')
  'spectral_est.org_imgs/spectral_localzoom.png'
  #+END_SRC

  #+RESULTS:
  [[file:spectral_est.org_imgs/spectral_localzoom.png]]

  这也说明了分析频率并不等同于频谱分辨率，是否可以使用和FFT相同数量的采样数据获得更高的频谱分辨率呢？

  下面我们来使用DTFT, 增加频谱分析的点数。

  #+BEGIN_SRC python :session spectral :results file :exports results
  f_anayse=np.linspace(190,210,201)
  X=np.zeros(len(f_anayse))
  for i,fi in enumerate(f_anayse):
      a=np.exp(-1j*2*np.pi*fi*t)
      X[i]=np.dot(s,a)

  plt.clf()
  plt.plot(f_anayse,20*np.log10(np.abs(X)/len(s)))
  plt.grid(b='on')
  plt.axis([190,210,-50,0])
  plt.savefig('spectral_est.org_imgs/spectral_DTFT_localzoom.png')
  'spectral_est.org_imgs/spectral_DTFT_localzoom.png'
  #+END_SRC

  #+RESULTS:
  [[file:spectral_est.org_imgs/spectral_DTFT_localzoom.png]]

  可以看到，增加频谱分析的点数之后，200、201Hz 就可以分开了[fn:1]，此时的分析频率为20/200=0.1Hz。但是谱的副瓣很高。
  将整个频谱都用DTFT 的方式给出：

  #+BEGIN_SRC python :session spectral :results file :exports results
  N=int(fs/0.1)
  f_anayse=np.linspace(0,fs,N)
  X=np.zeros(len(f_anayse))
  for i,fi in enumerate(f_anayse):
      a=np.exp(-1j*2*np.pi*fi*t)
      X[i]=np.dot(s,a)

  plt.clf()
  plt.plot(f_anayse,20*np.log10(np.abs(X)/len(s)))
  plt.grid(b='on')
  plt.savefig('spectral_est.org_imgs/spectral_DTFT.png')
  'spectral_est.org_imgs/spectral_DTFT.png'
  #+END_SRC

  #+RESULTS:
  [[file:spectral_est.org_imgs/spectral_DTFT.png]]

  DTFT的计算结果似乎副瓣明显高于FFT的结果，这不科学！
  其实上面的结果都没有错，问题的关键在于分析频率的取值点，上图中频点的位置和FFT 的频点位置并不相同（应该是没有一个点是相同的），只要稍微改动一下DTFT 的分析频率点位置，就能得到FFT的结果：


  #+BEGIN_SRC python :session spectral :results file :exports results
  plt.clf()
  plt.figure(figsize=(8,3))
  N=int(fs/0.1)
  f_anayse=np.linspace(0,fs,N+1)
  X=np.zeros(len(f_anayse))
  for i,fi in enumerate(f_anayse):
      a=np.exp(-1j*2*np.pi*fi*t)
      X[i]=np.dot(s,a)


  plt.subplot(121)
  plt.plot(f_anayse,20*np.log10(np.abs(X)/len(s)),'k', alpha=0.2)
  plt.grid(b='on')
  plt.subplot(122)
  plt.plot(f_anayse,20*np.log10(np.abs(X)/len(s)),'k', alpha=0.2)
  plt.grid(b='on')

  N=len(s)
  f_anayse=np.linspace(0,fs,N+1)
  X=np.zeros(len(f_anayse))
  for i,fi in enumerate(f_anayse):
      a=np.exp(-1j*2*np.pi*fi*t)
      X[i]=np.dot(s,a)

  plt.subplot(121)
  plt.plot(f_anayse,20*np.log10(np.abs(X)/len(s)),'r.')
  plt.subplot(122)
  plt.plot(f_anayse,20*np.log10(np.abs(X)/len(s)),'r.')
  plt.axis([190,210,-350,0])
  plt.savefig('spectral_est.org_imgs/spectral_DTFT_1.png')
  'spectral_est.org_imgs/spectral_DTFT_1.png'
  #+END_SRC

  #+RESULTS:
  [[file:spectral_est.org_imgs/spectral_DTFT_1.png]]

  有人称这是信号“截取”不完美出现的，实际上不同的信号截取起始时间，相当于信号的时域平移，而时移对应到频域是相移，相移并不会影响幅度谱。真正的原因就是分析频点选取的问题。注意到200、201 之间一个零深，但零深并不足够低，这是否也是频点没有恰好取到零点的原因呢？

  试试增加点数能否获得更深的零点：
  #+BEGIN_SRC python :session spectral :results file :exports results 
  plt.clf()
  N=10000
  f_anayse=np.linspace(195,206,N+1)
  X=np.zeros(len(f_anayse))
  for i,fi in enumerate(f_anayse):
      a=np.exp(-1j*2*np.pi*fi*t)
      X[i]=np.dot(s,a)

  plt.plot(f_anayse,20*np.log10(np.abs(X)/len(s)),'r')
  plt.savefig('spectral_est.org_imgs/spectral_DTFT_2.png')
  'spectral_est.org_imgs/spectral_DTFT_2.png'
  #+END_SRC

  #+RESULTS:
  [[file:spectral_est.org_imgs/spectral_DTFT_2.png]]

  这种方法并不可靠，应该理论分析200和201之间是否存在零点，如果存在，它的位置是多少。为了解决这个问题，可以借助z 变换。也可以使用更直接的分析方法。

** z 变换
 离散时间序列x[n]的Z变换定义为：
 \begin{equation}
 X(z)=\sum_{-\infty}^{+\infty}x[n]Z^{-n}
 \end{equation}

 它与傅里叶变换的关系在于： $z=e^{jw}=e^{j2\pi f}$ , z 平面单位圆上的响应就是傅里叶变换。

 方程的解的位置能确定出方向图零点的位置：
 \begin{equation}
 \sum_{0}^{N-1}x[n]Z^{-n}=0
 \end{equation}

 $N-1$ 阶方程一定存在 $N-1$ 个解，但只有落在单位圆上的解才对应为频谱的零点。


** 直接分析

  \begin{align}
  R(f)&=\sum_{n=0}^{N-1}e^{-j2\pi f\frac{n}{f_s}}\\\notag
&=\frac{1-\exp(-j2\pi f\frac{N}{f_s})}{1-\exp(-j2\pi f\frac{1}{f_s})}\\\notag
&=\frac{\exp(-j\pi f\frac{N}{f_s})[\exp(j\pi f\frac{N}{f_s})-\exp(-j\pi f\frac{N}{f_s})]}{\exp(-j\pi f\frac{1}{f_s})[\exp(j\pi f\frac{1}{f_s})-\exp(-j\pi f\frac{1}{f_s})]}\\\notag
&=\frac{\exp(-j\pi f\frac{N}{f_s})\sin(\pi f\frac{N}{f_s})}{\exp(-j\pi f\frac{1}{f_s})\sin(\pi f\frac{1}{f_s})}\\\notag
&=\exp(-j\pi f\frac{N-1}{f_s})\frac{\sin(\pi f\frac{N}{f_s})}{\sin(\pi f\frac{1}{f_s})}\\\notag
  \end{align}

  令 $\sin(\pi f\frac{N}{f_s})=0$ 得频谱零点位置为： 
  \begin{equation}
  f=k\frac{f_s}{N} \quad\quad (f\neq 0 \text{ or } k\neq 0)
  \end{equation}


结论：
- 200Hz、201Hz 之间没有零点

  上面给出了矩形窗采样后的频谱零点位置，对于一个单音信号，时域上相当于是单一频率的信号与矩形窗相乘，频域上就是频谱平移。上述例子中，采样率为1000Hz，采样点为1000点，所有整数Hz的频点都是谱零点，根据傅里叶变换的线性性，100Hz、200Hz、201Hz 的信号相加，频域也是相加，它们的零点都在整数频点上，200Hz 和 201Hz 之间并没有零点。因此频谱不会无限深，除非增加时域采样点。
- 几个频点的信号没有相互影响各自的谱峰高度

  因为某一个谱峰恰好位于其他频点信号的谱零点上。
- 增加时域的点数会改变上面的结论

  下面给出增加信号时长的仿真：

  #+BEGIN_SRC python :session spectral :results file 
  fs=1000.0 #samprate (Hz)
  T=10. #total time of signal (s)

  t=np.array(range(int(T*fs)))*1.0/fs
  s1=np.cos(2*np.pi*f1*t)
  s2=np.cos(2*np.pi*f2*t)
  s3=np.cos(2*np.pi*f3*t)

  s=s1+s2+s3
  plt.clf()
  S=np.fft.fft(s)/len(s)
  plt.plot(np.linspace(0,fs,len(s)),20*np.log10(np.abs(S)))
  plt.axis([190,210,-350,0])
  plt.savefig('spectral_est.org_imgs/spectral_bigN.png')
  'spectral_est.org_imgs/spectral_bigN.png'
  #+END_SRC

  #+RESULTS:
  [[file:spectral_est.org_imgs/spectral_bigN.png]]


  #+BEGIN_SRC python :session spectral :results file :exports results
  plt.clf()
  plt.figure(figsize=(12,4))
  N=int(fs/0.1)*30
  f_anayse=np.linspace(0,fs,N+1)
  faxis=[]
  X=[]
  for i,fi in enumerate(f_anayse):
    if 199<=fi<=202:
      a=np.exp(-1j*2*np.pi*fi*t)
      faxis.append(fi)
      X.append(np.dot(s,a))


  plt.subplot(121)
  plt.plot(faxis,20*np.log10(np.abs(X)/len(s)),'k', alpha=0.2)
  plt.grid(b='on')
  plt.subplot(122)
  plt.plot(faxis,20*np.log10(np.abs(X)/len(s)),'k')
  plt.grid(b='on')

  N=len(s)
  faxis=np.linspace(190,210,201)
  X=[]
  for i,fi in enumerate(faxis):
      a=np.exp(-1j*2*np.pi*fi*t)
      X.append(np.dot(s,a))

  plt.subplot(121)
  plt.plot(faxis,20*np.log10(np.abs(X)/len(s)),'r.')
  plt.axis([199,202,-300,0])
  
  plt.subplot(122)
  plt.plot(faxis,20*np.log10(np.abs(X)/len(s)),'r.')
  plt.axis([199,202,-50,0])
  plt.savefig('spectral_est.org_imgs/spectral_DTFT_bigN_local.png')
  'spectral_est.org_imgs/spectral_DTFT_bigN_local.png'
  #+END_SRC

  #+RESULTS:
  [[file:spectral_est.org_imgs/spectral_DTFT_bigN_local.png]]

  观察两个谱峰之间的零点数量可以发现，但信号长度增加10倍后，谱零点数量也增加了10倍。

* zoom FFT
从[[https://stackoverflow.com/questions/22277476/fft-lots-of-detail-around-certain-frequency][一个例子]] 开始。

zoom FFT的基本流程：
1. 以复数下变频的方式进行变频
2. 低通滤波
3. 采样
4. FFT

zoom FFt 肯定能降低计算量，但是是否能提高分辨率？
依然使用上面的例子进行分析。由于只有三个纯的单音信号，因此可以省略低通滤波这个步骤。

下面这段分析用的是最开始的信号，信号时长1s。
  #+BEGIN_SRC python :session spectral :results file
  from scipy.signal import decimate
  f_demod=200
  ratio =25
  lo = 2**.5 * np.exp(-2j*np.pi*f_demod * t) # local oscillator
  y = decimate(s * lo, ratio) # demodulate and decimate to 100 Hz

  plt.clf()
  Nfft=len(y)*10
  Y=np.fft.fft(y,Nfft)/len(y)
  plt.plot(np.linspace(0,fs/ratio,Nfft)+f_demod,20*np.log10(np.abs(Y)))
  plt.grid(b='on')
  plt.savefig('spectral_est.org_imgs/spectral_zoom.png')
  'spectral_est.org_imgs/spectral_zoom.png'
  #+END_SRC

  #+RESULTS:
  [[file:spectral_est.org_imgs/spectral_zoom.png]]

  可以看到，zoom 确实放大了局部的频谱，但是在同等时长下，分辨率并没有提高。另外，不需要LPF 的论点不可靠，信号中存在100Hz 的信号，使用低的采样率为什么没有造成混叠？

  

* Footnotes

[fn:1] 实际上，此处揭示的是FFT(DFT)的栅栏效应：DTFT得出的是连续谱，而DFT只能得到离散谱，离散谱线之间的部分是未知的。




